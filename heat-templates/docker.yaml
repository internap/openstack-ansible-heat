#!/usr/bin/env openstack stack create -e data/docker-default.yaml docker-heat -t
#parameters :
#   --os-cloud= your cloud.yaml cloud name to use
#
heat_template_version: 2013-05-23
description: A standalone docker instance


parameters:
  flavor_name:
    type: string
    label: Host Instance flavor
    description: Flavor for the host
    constraints:
      - custom_constraint: nova.flavor
        description: Must be a flavor known to Nova

  image_name:
    type: string
    label: OS image name
    description: Name or ID of the image to use for all the instances (controller and node).
    constraints:
      - custom_constraint: glance.image
        description: Must identify an image known to Glance

  network_wan:
    type: string
    label: (WAN) Public facing network
    description: Name or ID of the internet facing network to use (should have 'WAN' in his name)
    constraints:
      - custom_constraint: neutron.network
        description: Must identify an network known to Neutron

  network_lan:
    type: string
    label: (LAN) Private network
    description: Name or ID of the internal network to use (should have 'LAN' in his name)
    constraints:
      - custom_constraint: neutron.network
        description: Must identify an network known to Neutron
  keypair_name:
    type: string
    label: Controller Keypair
    description: SSH Keypair to use for the rancher controller
    constraints:
      - custom_constraint: nova.keypair
        description: Must be a keypair known to Nova

  node_count:
    type: number
    label: Number of instance
    description: Total number of instance to use, balanced out between controller and nodes

  role:
    type:     string
    label:    role to execute
    default:  docker
    hidden:   true

resources:
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 2
      timeout: 300

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  install_ansible:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: { get_file: ../scripts/install-ansible.sh }
          params:
            $WC_NOTIFY: { get_attr: ['wait_handle', 'curl_cli'] }

  install_ansible_roles:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: { get_file: ../scripts/install-ansible-roles.sh }
          params:
            $WC_NOTIFY: { get_attr: ['wait_handle', 'curl_cli'] }

  running_ansible_playbook:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: { get_file: ../scripts/running-playbook.sh }
          params:
            $WC_NOTIFY: { get_attr: ['wait_handle', 'curl_cli'] }
            $ROLE: docker

  controller_serverconfig:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: install_ansible }
      - config: { get_resource: install_ansible_roles }
      - config: { get_resource: running_ansible_playbook }

  #doesn't work for us (Internap)
  # deploy_controller:
  #   type: OS::Heat::SoftwareDeployment
  #   properties:
  #     config: { get_resource: controller_serverconfig }
  #     server: { get_resource: controller_server }
  #     input_values:
  #       WC_NOTIFY: { get_attr: ['wait_handle', 'curl_cli'] }

  docker_server:
    type: OS::Nova::Server
    properties:
      image:        { get_param: image_name }
      flavor:       { get_param: flavor_name }
      key_name:     { get_param: keypair_name }
      networks:
        - network:  { get_param: network_wan }
      user_data_format: RAW
      user_data:    { get_resource: controller_serverconfig }

outputs:
  name:
    description: Name of the rancher controller.
    value: { get_attr: [docker_server, name] }
  # curl_for_wait:
  #   description: curl_for_wait
  #   value: { get_attr: ['wait_handle', 'curl_cli'] }รง
  # cluster_key:
  #   description: Generated ssh key for cluster
  #   value: { get_attr: [rancher-clusterkey, show]}
