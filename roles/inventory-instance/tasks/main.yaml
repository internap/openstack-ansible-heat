---
# Playbook to instanciate an OpenStack instance

- name: ensure security group for public facing nodes exists
  os_security_group:
    cloud:                        "{{ os_cloud_name }}"
    state:                        present
    name:                         "{{ playbook_name }}-public-secgroup"
    description:                  "security group for public {{ playbook_name }} servers"

- name: ensure HTTP is allowed from anywhere for public nodes in public-secgroup
  os_security_group_rule:
    cloud:                        "{{ os_cloud_name }}"
    security_group:               "{{ playbook_name }}-public-secgroup"
    protocol:                     tcp
    port_range_min:               80
    port_range_max:               80
    remote_ip_prefix:             0.0.0.0/0

- name: ensure HTTPS is allowed from anywhere for public nodes in public-secgroup
  os_security_group_rule:
    cloud:                        "{{ os_cloud_name }}"
    security_group:               "{{ playbook_name }}-public-secgroup"
    protocol:                     tcp
    port_range_min:               443
    port_range_max:               443
    remote_ip_prefix:             0.0.0.0/0

- name: ensure SSH is allowed from anywhere for public nodes in public-secgroup
  os_security_group_rule:
    cloud:                        "{{ os_cloud_name }}"
    security_group:               "{{ playbook_name }}-public-secgroup"
    protocol:                     tcp
    port_range_min:               22
    port_range_max:               22
    remote_ip_prefix:              0.0.0.0/0

- name: ensure all TCP is allowed from private network to the public interface in public-secgroup
  os_security_group_rule:
    cloud:                        "{{ os_cloud_name }}"
    security_group:               "{{ playbook_name }}-public-secgroup"
    protocol:                     tcp
    port_range_min:               1
    port_range_max:               65535
    remote_ip_prefix:               "{{ os_cloud_privatesubnet_cidr }}"

- name: ensure all UDP is allowed from private network to the public interface in public-secgroup
  os_security_group_rule:
    cloud:                        "{{ os_cloud_name }}"
    security_group:               "{{ playbook_name }}-public-secgroup"
    protocol:                     udp
    port_range_min:               1
    port_range_max:               65535
    remote_ip_prefix:             "{{ os_cloud_privatesubnet_cidr }}"

- name: ensure all ICMP is allowed from private network to the public interface in public-secgroup
  os_security_group_rule:
    cloud:                        "{{ os_cloud_name }}"
    security_group:               "{{ playbook_name }}-public-secgroup"
    protocol:                     icmp
    port_range_min:               1
    port_range_max:               255
    remote_ip_prefix:             "{{ os_cloud_privatesubnet_cidr }}"

- name: ensure public-facing nodes are up
  no_log:                         true
  os_server:
    cloud:                        "{{ os_cloud_name }}"
    state:                        present
    name:                         "{{ os_instancename_prefix + item }}"
    image:                        "{{ os_cloud_image_name }}"
    key_name:                     "{{ os_key_name }}"
    flavor:                       "{{ os_cloud_flavor_name }}"
    nics:
      - net-name:                 "{{ os_cloud_publicnetwork_name }}"
      - net-name:                 "{{ os_cloud_privatenetwork_name }}"
    meta:
      tags:                       "{{ os_instance_tags }}"
      groups:                     "ansible_nodes,{{ playbook_name }},meta-group_{{ os_instance_tags }},public_nodes"
      key_name:                   "{{ os_key_name }}"
    wait:                         yes
  with_sequence:                  count="{{ public_node_number | int }}"
  register:                       created_public_os_instances
    #security_groups:             "{{ playbook_name }}-public-secgroup"

- name: wait until SSH is available for public nodes
  no_log:                         true
  local_action:
    module:                       wait_for
    host:                         "{{ item[ 'openstack' ][ 'networks' ][ os_cloud_publicnetwork_name ][ 0 ] }}"
    port:                         22
    delay:                        5
    timeout:                      40
    state:                        started
  with_items:                     "{{ created_public_os_instances.results }}"

- name: finding public-facing port of public nodes
  no_log:                         true
  os_port_facts:
    cloud:                        "{{ os_cloud_name }}"
    filters:
      device_id:                  "{{ item[ 'openstack' ][ 'id' ] }}"
      network_id:                 "{{ os_cloud_publicnetwork_id }}"
      status:                     ACTIVE
  with_items:                     "{{ created_public_os_instances.results }}"
  register:                       public_ports

- name: assign security group to public-facing interface of public nodes
  no_log:                         true
  os_port:
    cloud:                        "{{ os_cloud_name }}"
    state:                        present
    name:                         "{{ item.ansible_facts.openstack_ports[ 0 ].id }}"
    security_groups:              "{{ playbook_name }}-public-secgroup"
  with_items:                     "{{ public_ports.results }}"

- name: refresh inventory with newly created public-facing nodes
  no_log:                         true
  add_host:
    name:                         "{{ item.server.id }}"
    groups:                       "ansible_nodes,{{ playbook_name }},meta-group_{{ os_instance_tags }},public_nodes"
    instance_name:                "{{ item.server.name }}"
    os_uuid:                      "{{ item.id }}"
    os_key_name:                  "{{ os_key_name }}"
    os_instance_tags:             "{{ os_instance_tags }}"
    ansible_ssh_host:             "{{ ( item.server.networks[ os_cloud_publicnetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
    openstack:
      accessIPv4:                 "{{ ( item.server.networks[ os_cloud_publicnetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
    public_v4:                    "{{ ( item.server.networks[ os_cloud_publicnetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
    private_v4:                   "{{ ( item.server.networks[ os_cloud_privatenetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
    publicIPv4:                   "{{ ( item.server.networks[ os_cloud_publicnetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
    privateIPv4:                  "{{ ( item.server.networks[ os_cloud_privatenetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
    os_cloud_publicnetwork_name:  "{{ os_cloud_publicnetwork_name }}"
    os_cloud_publicnetwork_id:    "{{ os_cloud_publicnetwork_id }}"
    os_cloud_publicsubnet_id:     "{{ os_cloud_publicsubnet_id }}"
    os_cloud_publicsubnet_cidr:   "{{ os_cloud_publicsubnet_cidr }}"
    os_cloud_privatenetwork_name: "{{ os_cloud_privatenetwork_name }}"
    os_cloud_privatenetwork_id:   "{{ os_cloud_privatenetwork_id }}"
    os_cloud_privatesubnet_id:    "{{ os_cloud_privatesubnet_id }}"
    os_cloud_privatesubnet_cidr:  "{{ os_cloud_privatesubnet_cidr }}"
    os_instancename_prefix:       ''
  with_items:                     "{{ created_public_os_instances.results }}"

- name:                           forcing local DNS attribution on private subnet
  os_subnet:
    cloud:                        "{{ os_cloud_name }}"
    state:                        present
    network_name:                 "{{ os_cloud_privatenetwork_name }}"
    name:                         "{{ os_cloud_privatesubnet_id }}"
    cidr:                         "{{ os_cloud_privatesubnet_cidr }}"
    dns_nameservers:
       - "{{ global_dns_server_1 }}"
       - "{{ global_dns_server_2 }}"

- name: ensure private instance are up
  #no_log:                         true
  os_server:
    cloud:                        "{{ os_cloud_name }}"
    state:                        present
    name:                         "{{ os_instancename_prefix + ( item|int + public_node_number|int )|string }}"
    image:                        "{{ os_cloud_image_name }}"
    key_name:                     "{{ os_key_name }}"
    flavor:                       "{{ os_cloud_flavor_name }}"
    network:                      "{{ os_cloud_privatenetwork_name }}"
    meta:
      tags:                       "{{ os_instance_tags }}"
      groups:                     "ansible_nodes,{{ playbook_name }},meta-group_{{ os_instance_tags }},private_nodes"
      key_name:                   "{{ os_key_name }}"
    wait:                         yes
  register:                       created_private_os_instances
  with_sequence:                  count="{{ private_node_number | int }}"

- name: refresh inventory with newly created private nodes
  no_log:                         true
  add_host:
    name:                         "{{ item.server.id }}"
    groups:                       "ansible_nodes,{{ playbook_name }},meta-group_{{ os_instance_tags }},private_nodes"
    instance_name:                "{{ item.server.name }}"
    os_uuid:                      "{{ item.id }}"
    os_key_name:                  "{{ os_key_name }}"
    os_instance_tags:             "{{ os_instance_tags }}"
    ansible_ssh_host:             "{{ ( item.server.networks[ os_cloud_privatenetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
    openstack:
      accessIPv4:                 "{{ ( item.server.networks[ os_cloud_publicnetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
    public_v4:                    "{{ ( item.server.networks[ os_cloud_publicnetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
    private_v4:                   "{{ ( item.server.networks[ os_cloud_privatenetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
    publicIPv4:                   "{{ ( item.server.networks[ os_cloud_publicnetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
    privateIPv4:                  "{{ ( item.server.networks[ os_cloud_privatenetwork_name ] | default( [] ) )[ 0 ] | default( '' ) }}"
    os_cloud_publicnetwork_name:  "{{ os_cloud_publicnetwork_name }}"
    os_cloud_publicnetwork_id:    "{{ os_cloud_publicnetwork_id }}"
    os_cloud_publicsubnet_id:     "{{ os_cloud_publicsubnet_id }}"
    os_cloud_publicsubnet_cidr:   "{{ os_cloud_publicsubnet_cidr }}"
    os_cloud_privatenetwork_name: "{{ os_cloud_privatenetwork_name }}"
    os_cloud_privatenetwork_id:   "{{ os_cloud_privatenetwork_id }}"
    os_cloud_privatesubnet_id:    "{{ os_cloud_privatesubnet_id }}"
    os_cloud_privatesubnet_cidr:  "{{ os_cloud_privatesubnet_cidr }}"
    os_instancename_prefix: ''
  with_items:                     "{{ created_private_os_instances.results }}"
  when:                           private_node_number > 0
