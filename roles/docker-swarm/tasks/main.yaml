---
# Playbook to ensure docker swarm is installed and configured correctly

- name: share Docker Swarm Leader hostname play-wide
  set_fact:
    os_swarm_lead:    "{{ groups[ 'public_nodes' ][ 0 ] }}"

- name: share public IP as Docker Swarm leader (hosts are public)
  set_fact:
    os_swarm_lead_ip: "{{ hostvars[ os_swarm_lead ].publicIPv4 }}"
  when:               private_node_number <= 0

- name: using host with following private IP as Docker Swarm leader (hosts are private)
  set_fact:
    os_swarm_lead_ip: "{{ hostvars[ os_swarm_lead ].privateIPv4 }}"
  when:               private_node_number > 0

- name: detect Docker Swarm status
  command:            docker info --format={% raw %}"{{.Swarm.LocalNodeState}}"{% endraw %}
  register:           swarm_status

- name: add all active Docker instances to Docker Swarm os_swarm group
  add_host:
    hostname:         "{{ inventory_hostname }}"
    groups:           os_swarm
  when:               swarm_status.stdout == 'active'

- name: make sure Docker Swarm Leader is active
  command:            docker swarm init --advertise-addr "{{ os_swarm_lead_ip }}"
  register:           docker_result
  until:              docker_result|success
  retries:            3
  delay:              10
  ignore_errors:      yes
  become:             yes
  when:               inventory_hostname == os_swarm_lead and swarm_status.stdout != 'active'

- name: determine Docker Swarm Lead is active and leading
  command:            docker info --format={% raw %}"{{.Swarm.ControlAvailable}}"{% endraw %}
  register:           swarm_lead_status
  when:               inventory_hostname == os_swarm_lead

- name: add Docker Swarm Lead(s) to os_swarm_lead group
  add_host:
    hostname:         "{{ inventory_hostname }}"
    groups:           os_swarm_lead
  when:               inventory_hostname == os_swarm_lead and swarm_lead_status.stdout is defined and swarm_lead_status.stdout == 'true'

- name: pull Docker Swarm token from leader
  command:            docker swarm join-token worker -q
  register:           leader_swarm_token
  until:              leader_swarm_token|success
  retries:            3
  delay:              30
  ignore_errors:      yes
  become:             yes
  when:               inventory_hostname == os_swarm_lead and swarm_lead_status.stdout is defined and swarm_lead_status.stdout == 'true'

- name: sharing Docker Swarm token play-wide
  set_fact:
    os_swarm_token:   "{{ hostvars[ os_swarm_lead ].leader_swarm_token.stdout }}"

- name: register swarm nodes
  command:            docker info --format={% raw %}"{{json .Swarm.RemoteManagers}}"{% endraw %}
  register:           node_docker_swarm
  until:              node_docker_swarm|success
  retries:            3
  delay:              10
  ignore_errors:      yes
  become:             yes
  when:               inventory_hostname != os_swarm_lead

- name: debug swarm token
  debug:
    msg:              "{{ node_docker_swarm.stdout }}"
  when:               inventory_hostname != os_swarm_lead

- name: register swarm nodes
  command:            docker swarm join --token "{{ os_swarm_token }}" "{{ os_swarm_lead_ip }}":2377
  register:           docker_swarm
  until:              docker_swarm|success
  retries:            3
  delay:              10
  ignore_errors:      yes
  become:             yes
  when:               inventory_hostname != os_swarm_lead and os_swarm_token is defined and node_docker_swarm is defined and node_docker_swarm.stdout == "null"

- name: make sure systemd docker directory exists
  file:
    path:             /etc/systemd/system/docker.service.d
    state:            directory

- name: enforce swarm private nodes to use proxy for docker registry operations
  become:             yes
  blockinfile:
    create:           yes
    state:            present
    dest:             /etc/systemd/system/docker.service.d/http-proxy.conf
    insertafter:      EOF
    block:  |
                      [Service]
                      Environment="HTTP_PROXY=http://{{ proxy_host_privateip }}:{{ proxy_http_port }}"
  when:               inventory_hostname != os_swarm_lead and os_swarm_token is defined

- name: reload dockerd configuration
  systemd:
    state:            restarted
    daemon_reload:    yes
    name:             docker
